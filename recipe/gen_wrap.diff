diff --git a/gen_wrap.py b/gen_wrap.py
index 833e024..0ab637c 100644
--- a/gen_wrap.py
+++ b/gen_wrap.py
@@ -25,6 +25,7 @@ THE SOFTWARE.
 import re
 import sys
 from py_codegen import PythonCodeGenerator, Indentation
+from distutils.sysconfig import get_config_var
 
 SEM_TAKE = "take"
 SEM_GIVE = "give"
@@ -357,18 +358,32 @@ import threading
 
 _PY3 = sys.version_info >= (3,)
 
+is_win = sys.platform.startswith('win32')
 
 from islpy._isl_cffi import ffi
-lib = ffi.dlopen(None)
+
+if is_win:
+    lib = ffi.dlopen('{win_pyd}')
+else:
+    lib = ffi.dlopen(None)
 
 from cffi import FFI
 libc_ffi = FFI()
-libc_ffi.cdef('''
+
+cdef_string = '''
     char *strdup(const char *s);
     void free(void *ptr);
-    ''')
+    '''
+
+if is_win:
+    cdef_string = cdef_string.replace('strdup', '_strdup')
 
-libc = libc_ffi.dlopen(None)
+libc_ffi.cdef(cdef_string)
+
+if is_win:
+    libc = libc_ffi.dlopen('msvcrt')
+else:
+    libc = libc_ffi.dlopen(None)
 
 
 class Error(Exception):
@@ -378,7 +393,7 @@ class Error(Exception):
 class IslTypeError(Error, TypeError):
     pass
 
-_context_use_map = {}
+_context_use_map = {{}}
 
 def _deref_ctx(ctx_data, ctx_iptr):
     _context_use_map[ctx_iptr] -= 1
@@ -462,7 +477,10 @@ class _EnumBase(object):
 
 class _ManagedCString(object):
     def __init__(self, cdata):
-        self.data = libc.strdup(cdata)
+        if is_win:
+            self.data = libc._strdup(cdata)
+        else:
+            self.data = libc.strdup(cdata)
         if self.data == libc_ffi.NULL:
             raise Error("strdup() failed")
 
@@ -1621,7 +1639,12 @@ def gen_wrapper(include_dirs, include_barvinok=False, isl_version=None):
 
             wrapper_f.write(
                     "# AUTOMATICALLY GENERATED by gen_wrap.py -- do not edit\n")
-            wrapper_f.write(PY_PREAMBLE)
+            win_soabi = get_config_var('SOABI')
+            if win_soabi is not None:
+                win_pyd = "_isl_cffi.{}.pyd".format(win_soabi)
+            else:
+                win_pyd = "_isl_cffi.pyd"
+            wrapper_f.write(PY_PREAMBLE.format(win_pyd=win_pyd))
             write_enums_to_wrapper(wrapper_f)
             write_classes_to_wrapper(wrapper_f)
 
